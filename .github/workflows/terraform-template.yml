name: 'Reusable Terraform Plan/Apply'

on:
  workflow_call:
    inputs:
      stack_directory:
        description: 'Directory where stack is located'
        required: true
        type: string
      resource_group_name:
        description: 'Resource group for the backend config'
        required: true
        type: string
      storage_account_name:
        description: 'Storage account for the backend config'
        required: true
        type: string
      container_name:
        description: 'Container name for the backend config'
        required: true
        type: string
      key:
        description: 'State file key for the backend config'
        required: true
        type: string
      # client_ip:
      #   description: 'External IP address for Terraform plan'
      #   required: true
      #   type: string
      # additional_vars:
      #   description: 'Additional Terraform variables as key=value pairs'
      #   required: false
      #   type: string

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_USE_OIDC: true

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: self-hosted
    env:
      ARM_SKIP_PROVIDER_REGISTRATION: true
      TF_VAR_vmLinuxSshAuthorizedKeys: ${{ secrets.TF_VAR_VMLINUXSSHAUTHORIZEDKEYS }}
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # - name: Get IP Address
    #   run: |
    #     IP_ADDRESS="${{ inputs.client_ip }}"
    #     echo "External IP is $IP_ADDRESS"
    #     echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Terraform Init
      run: |
        terraform -chdir=${{ inputs.stack_directory }} init \
          --backend-config=resource_group_name="${{ inputs.resource_group_name }}" \
          --backend-config=storage_account_name="${{ inputs.storage_account_name }}" \
          --backend-config=container_name="${{ inputs.container_name }}" \
          --backend-config=key="${{ inputs.key }}"

    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform -chdir=${{ inputs.stack_directory }} plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT
        if [ $exitcode -eq 1 ]; then
          echo "Terraform Plan Failed!"
          exit 1
        fi

    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: tfplan
        path: ${{ inputs.stack_directory }}/${{ inputs.key }}

  terraform-apply:
    name: 'Terraform Apply'
    if: ${{ github.ref == 'refs/heads/main' }} && ${{ needs.terraform-plan.outputs.tfplanExitCode == 2 }}
    runs-on: self-hosted
    needs: [terraform-plan]

    steps:
    - name: Get IP Address
      run: |
        IP_ADDRESS="${{ inputs.client_ip }}"
        echo "External IP is $IP_ADDRESS"
        echo "IP_ADDRESS=$IP_ADDRESS" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform -chdir=${{ inputs.stack_directory }} init \
        --backend-config=resource_group_name="${{ inputs.resource_group_name }}" \
        --backend-config=storage_account_name="${{ inputs.storage_account_name }}" \
        --backend-config=container_name="${{ inputs.container_name }}" \
        --backend-config=key="${{ inputs.key }}"

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: tfplan
        path: ${{ inputs.stack_directory }}/tfplan

    - name: Terraform Apply
      run: terraform -chdir=${{ inputs.stack_directory }} apply -auto-approve tfplan/${{ inputs.key }}
